diff --git a/node_modules/typedoc/dist/index.js b/node_modules/typedoc/dist/index.js
index fc8c189..575b542 100644
--- a/node_modules/typedoc/dist/index.js
+++ b/node_modules/typedoc/dist/index.js
@@ -77,5 +77,7 @@ Object.defineProperty(exports, "JSONOutput", { enumerable: true, get: function (
 Object.defineProperty(exports, "Serializer", { enumerable: true, get: function () { return serialization_1.Serializer; } });
 Object.defineProperty(exports, "Deserializer", { enumerable: true, get: function () { return serialization_1.Deserializer; } });
 Object.defineProperty(exports, "SerializeEvent", { enumerable: true, get: function () { return serialization_1.SerializeEvent; } });
+var basepath_1 = require("./lib/converter/utils/base-path");
+Object.defineProperty(exports, "BasePath", { enumerable: true, get: function () { return basepath_1.BasePath; } });
 const typescript_1 = __importDefault(require("typescript"));
 exports.TypeScript = typescript_1.default;
diff --git a/node_modules/typedoc/dist/lib/application.js b/node_modules/typedoc/dist/lib/application.js
index 98f4da0..b667302 100644
--- a/node_modules/typedoc/dist/lib/application.js
+++ b/node_modules/typedoc/dist/lib/application.js
@@ -99,7 +99,7 @@ let Application = exports.Application = Application_1 = class Application extend
         this.setOptions(options, /* reportErrors */ false);
         this.options.read(new index_2.Logger());
         this.logger.level = this.options.getValue("logLevel");
-        await (0, index_2.loadPlugins)(this, this.options.getValue("plugin"));
+        await (0, index_2.loadPlugins)(this, this.options.getValue("plugin"), options.pluginInstanes);
         this.bootstrap(options);
     }
     /**
@@ -142,7 +142,8 @@ let Application = exports.Application = Application_1 = class Application extend
      * Return the path to the TypeScript compiler.
      */
     getTypeScriptPath() {
-        return (0, paths_1.nicePath)(Path.dirname(require.resolve("typescript")));
+        return '';
+        //return (0, paths_1.nicePath)(Path.dirname(require.resolve("typescript")));
     }
     getTypeScriptVersion() {
         return typescript_1.default.version;
@@ -151,15 +152,15 @@ let Application = exports.Application = Application_1 = class Application extend
      * Gets the entry points to be documented according to the current `entryPoints` and `entryPointStrategy` options.
      * May return undefined if entry points fail to be expanded.
      */
-    getEntryPoints() {
-        return (0, entry_point_1.getEntryPoints)(this.logger, this.options);
+    getEntryPoints(tsLibsConfig) {
+        return (0, entry_point_1.getEntryPoints)(this.logger, this.options, tsLibsConfig);
     }
     /**
      * Run the converter for the given set of files and return the generated reflections.
      *
      * @returns An instance of ProjectReflection on success, undefined otherwise.
      */
-    convert() {
+    convert(tsLibsConfig) {
         const start = Date.now();
         // We freeze here rather than in the Converter class since TypeDoc's tests reuse the Application
         // with a few different settings.
@@ -174,7 +175,7 @@ let Application = exports.Application = Application_1 = class Application extend
         if (!supportedVersionMajorMinor.some((version) => version == typescript_1.default.versionMajorMinor)) {
             this.logger.warn(`You are running with an unsupported TypeScript version! If TypeDoc crashes, this is why. TypeDoc supports ${supportedVersionMajorMinor.join(", ")}`);
         }
-        const entryPoints = this.getEntryPoints();
+        const entryPoints = this.getEntryPoints(tsLibsConfig);
         if (!entryPoints) {
             // Fatal error already reported.
             return;
@@ -197,7 +198,7 @@ let Application = exports.Application = Application_1 = class Application extend
         this.logger.verbose(`Finished getting entry points in ${Date.now() - start}ms`);
         const project = this.converter.convert(entryPoints);
         this.logger.verbose(`Finished conversion in ${Date.now() - startConversion}ms`);
-        return project;
+        return { project, entryPoints };
     }
     convertAndWatch(success) {
         this.options.freeze();
diff --git a/node_modules/typedoc/dist/lib/converter/converter.js b/node_modules/typedoc/dist/lib/converter/converter.js
index befd6eb..8a8e2ef 100644
--- a/node_modules/typedoc/dist/lib/converter/converter.js
+++ b/node_modules/typedoc/dist/lib/converter/converter.js
@@ -368,7 +368,7 @@ function getSymbolForModuleLike(context, node) {
         globalSymbols[0]
             .getDeclarations()
             ?.every((declaration) => typescript_1.default.isModuleDeclaration(declaration) &&
-            typescript_1.default.isStringLiteral(declaration.name))) {
+                typescript_1.default.isStringLiteral(declaration.name))) {
         return globalSymbols[0];
     }
 }
@@ -377,6 +377,17 @@ function getExports(context, node, symbol) {
     // The generated docs aren't great, but you really ought not be using
     // this in the first place... so it's better than nothing.
     const exportEq = symbol?.exports?.get("export=");
+
+    function getGlobalSymbols() {
+        // Global file with no inferred top level symbol, get all symbols declared in this file.
+        const sourceFile = node.getSourceFile();
+        return context.checker
+            .getSymbolsInScope(node, typescript_1.default.SymbolFlags.ModuleMember)
+            .filter((s) => s
+                .getDeclarations()
+                ?.some((d) => d.getSourceFile() === sourceFile));
+    }
+
     if (exportEq) {
         // JS users might also have exported types here.
         // We need to filter for types because otherwise static methods can show up as both
@@ -401,16 +412,29 @@ function getExports(context, node, symbol) {
                 }
             }
         }
+
+        const globSymbols = getGlobalSymbols();
+        if (globSymbols && globSymbols.length > 0) {
+            globSymbols.forEach(gs => {
+                let canAdd = gs.exportSymbol === undefined || !result.includes(gs.exportSymbol);
+                if (canAdd) {
+                    const vd = gs.valueDeclaration;
+                    if (vd) {
+                        canAdd = !result.some(x => x.valueDeclaration && x.valueDeclaration.pos === vd.pos && x.valueDeclaration.end === vd.end);
+                    }
+                }
+
+                if (canAdd) {
+                    result.push(gs);
+                }
+            });
+        }
     }
     else {
-        // Global file with no inferred top level symbol, get all symbols declared in this file.
-        const sourceFile = node.getSourceFile();
-        result = context.checker
-            .getSymbolsInScope(node, typescript_1.default.SymbolFlags.ModuleMember)
-            .filter((s) => s
-            .getDeclarations()
-            ?.some((d) => d.getSourceFile() === sourceFile));
+        result = getGlobalSymbols();
     }
+
+
     // Put symbols named "default" last, #1795
     result.sort((a, b) => {
         if (a.name === "default") {
diff --git a/node_modules/typedoc/dist/lib/converter/plugins/CategoryPlugin.js b/node_modules/typedoc/dist/lib/converter/plugins/CategoryPlugin.js
index a49422d..9793c9f 100644
--- a/node_modules/typedoc/dist/lib/converter/plugins/CategoryPlugin.js
+++ b/node_modules/typedoc/dist/lib/converter/plugins/CategoryPlugin.js
@@ -27,11 +27,12 @@ let CategoryPlugin = exports.CategoryPlugin = CategoryPlugin_1 = class CategoryP
      * Create a new CategoryPlugin instance.
      */
     initialize() {
-        this.listenTo(this.owner, {
-            [converter_1.Converter.EVENT_BEGIN]: this.onBegin,
-            [converter_1.Converter.EVENT_RESOLVE]: this.onResolve,
-            [converter_1.Converter.EVENT_RESOLVE_END]: this.onEndResolve,
-        }, undefined, -200);
+        // we dont need this info in preview!
+        // this.listenTo(this.owner, {
+        //     [converter_1.Converter.EVENT_BEGIN]: this.onBegin,
+        //     [converter_1.Converter.EVENT_RESOLVE]: this.onResolve,
+        //     [converter_1.Converter.EVENT_RESOLVE_END]: this.onEndResolve,
+        // }, undefined, -200);
     }
     /**
      * Triggered when the converter begins converting a project.
diff --git a/node_modules/typedoc/dist/lib/converter/plugins/GroupPlugin.js b/node_modules/typedoc/dist/lib/converter/plugins/GroupPlugin.js
index 0ab5427..22bfebe 100644
--- a/node_modules/typedoc/dist/lib/converter/plugins/GroupPlugin.js
+++ b/node_modules/typedoc/dist/lib/converter/plugins/GroupPlugin.js
@@ -29,14 +29,16 @@ let GroupPlugin = exports.GroupPlugin = GroupPlugin_1 = class GroupPlugin extend
      * Create a new GroupPlugin instance.
      */
     initialize() {
-        this.listenTo(this.owner, {
-            [converter_1.Converter.EVENT_RESOLVE_BEGIN]: () => {
-                this.sortFunction = (0, sort_1.getSortFunction)(this.application.options);
-                GroupPlugin_1.WEIGHTS = this.groupOrder;
-            },
-            [converter_1.Converter.EVENT_RESOLVE]: this.onResolve,
-            [converter_1.Converter.EVENT_RESOLVE_END]: this.onEndResolve,
-        });
+        // we dont need this info in preview!
+
+        // this.listenTo(this.owner, {
+        //     [converter_1.Converter.EVENT_RESOLVE_BEGIN]: () => {
+        //         this.sortFunction = (0, sort_1.getSortFunction)(this.application.options);
+        //         GroupPlugin_1.WEIGHTS = this.groupOrder;
+        //     },
+        //     [converter_1.Converter.EVENT_RESOLVE]: this.onResolve,
+        //     [converter_1.Converter.EVENT_RESOLVE_END]: this.onEndResolve,
+        // });
     }
     /**
      * Triggered when the converter resolves a reflection.
diff --git a/node_modules/typedoc/dist/lib/converter/plugins/PackagePlugin.js b/node_modules/typedoc/dist/lib/converter/plugins/PackagePlugin.js
index aa947d2..d6769b3 100644
--- a/node_modules/typedoc/dist/lib/converter/plugins/PackagePlugin.js
+++ b/node_modules/typedoc/dist/lib/converter/plugins/PackagePlugin.js
@@ -45,18 +45,20 @@ const path_1 = require("path");
  */
 let PackagePlugin = exports.PackagePlugin = class PackagePlugin extends components_1.ConverterComponent {
     initialize() {
-        this.listenTo(this.owner, {
-            [converter_1.Converter.EVENT_BEGIN]: this.onBegin,
-            [converter_1.Converter.EVENT_RESOLVE_BEGIN]: this.onBeginResolve,
-            [converter_1.Converter.EVENT_END]: () => {
-                delete this.readmeFile;
-                delete this.readmeContents;
-                delete this.packageJson;
-            },
-        });
-        this.listenTo(this.application, {
-            [application_events_1.ApplicationEvents.REVIVE]: this.onRevive,
-        });
+        // we dont need this info in preview!
+
+        // this.listenTo(this.owner, {
+        //     [converter_1.Converter.EVENT_BEGIN]: this.onBegin,
+        //     [converter_1.Converter.EVENT_RESOLVE_BEGIN]: this.onBeginResolve,
+        //     [converter_1.Converter.EVENT_END]: () => {
+        //         delete this.readmeFile;
+        //         delete this.readmeContents;
+        //         delete this.packageJson;
+        //     },
+        // });
+        // this.listenTo(this.application, {
+        //     [application_events_1.ApplicationEvents.REVIVE]: this.onRevive,
+        // });
     }
     onRevive(project) {
         this.onBegin();
diff --git a/node_modules/typedoc/dist/lib/converter/plugins/SourcePlugin.js b/node_modules/typedoc/dist/lib/converter/plugins/SourcePlugin.js
index c21517c..a2c25b6 100644
--- a/node_modules/typedoc/dist/lib/converter/plugins/SourcePlugin.js
+++ b/node_modules/typedoc/dist/lib/converter/plugins/SourcePlugin.js
@@ -124,28 +124,31 @@ let SourcePlugin = exports.SourcePlugin = class SourcePlugin extends components_
      * @returns The found repository info or undefined.
      */
     getRepository(fileName) {
-        // Check for known non-repositories
-        const dirName = (0, path_1.dirname)(fileName);
-        const segments = dirName.split("/");
-        for (let i = segments.length; i > 0; i--) {
-            if (this.ignoredPaths.has(segments.slice(0, i).join("/"))) {
-                return;
-            }
-        }
-        // Check for known repositories
-        for (const path of Object.keys(this.repositories)) {
-            if (fileName.toLowerCase().startsWith(path)) {
-                return this.repositories[path];
-            }
-        }
-        // Try to create a new repository
-        const repository = repository_1.Repository.tryCreateRepository(dirName, this.sourceLinkTemplate, this.gitRevision, this.gitRemote, this.application.logger);
-        if (repository) {
-            this.repositories[repository.path.toLowerCase()] = repository;
-            return repository;
-        }
-        // No repository found, add path to ignored paths
-        this.ignoredPaths.add(dirName);
+        // we dont need this info in preview!
+        return undefined; 
+
+        // // Check for known non-repositories
+        // const dirName = (0, path_1.dirname)(fileName);
+        // const segments = dirName.split("/");
+        // for (let i = segments.length; i > 0; i--) {
+        //     if (this.ignoredPaths.has(segments.slice(0, i).join("/"))) {
+        //         return;
+        //     }
+        // }
+        // // Check for known repositories
+        // for (const path of Object.keys(this.repositories)) {
+        //     if (fileName.toLowerCase().startsWith(path)) {
+        //         return this.repositories[path];
+        //     }
+        // }
+        // // Try to create a new repository
+        // const repository = repository_1.Repository.tryCreateRepository(dirName, this.sourceLinkTemplate, this.gitRevision, this.gitRemote, this.application.logger);
+        // if (repository) {
+        //     this.repositories[repository.path.toLowerCase()] = repository;
+        //     return repository;
+        // }
+        // // No repository found, add path to ignored paths
+        // this.ignoredPaths.add(dirName);
     }
 };
 __decorate([
diff --git a/node_modules/typedoc/dist/lib/models/reflections/project.js b/node_modules/typedoc/dist/lib/models/reflections/project.js
index 19deae5..b7446ec 100644
--- a/node_modules/typedoc/dist/lib/models/reflections/project.js
+++ b/node_modules/typedoc/dist/lib/models/reflections/project.js
@@ -192,6 +192,15 @@ class ProjectReflection extends container_1.ContainerReflection {
     getSymbolFromReflection(reflection) {
         return this.reflectionIdToSymbolMap.get(reflection.id);
     }
+
+    getSymbolByReflectionId(reflectionId) {
+        return this.reflectionIdToSymbolMap.get(reflectionId);
+    }
+
+    getReflectionChildsByParentId(reflectionId) {
+        return this.reflectionChildren.getNoInsert(reflectionId);
+    }
+
     getReferenceGraph() {
         if (!this.referenceGraph) {
             this.referenceGraph = new Map();
diff --git a/node_modules/typedoc/dist/lib/utils/entry-point.js b/node_modules/typedoc/dist/lib/utils/entry-point.js
index d1e9830..575f56d 100644
--- a/node_modules/typedoc/dist/lib/utils/entry-point.js
+++ b/node_modules/typedoc/dist/lib/utils/entry-point.js
@@ -1,18 +1,18 @@
 "use strict";
-var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
+var __createBinding = (this && this.__createBinding) || (Object.create ? (function (o, m, k, k2) {
     if (k2 === undefined) k2 = k;
     var desc = Object.getOwnPropertyDescriptor(m, k);
     if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
-      desc = { enumerable: true, get: function() { return m[k]; } };
+        desc = { enumerable: true, get: function () { return m[k]; } };
     }
     Object.defineProperty(o, k2, desc);
-}) : (function(o, m, k, k2) {
+}) : (function (o, m, k, k2) {
     if (k2 === undefined) k2 = k;
     o[k2] = m[k];
 }));
-var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
+var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function (o, v) {
     Object.defineProperty(o, "default", { enumerable: true, value: v });
-}) : function(o, v) {
+}) : function (o, v) {
     o["default"] = v;
 });
 var __importStar = (this && this.__importStar) || function (mod) {
@@ -29,6 +29,7 @@ Object.defineProperty(exports, "__esModule", { value: true });
 exports.getExpandedEntryPointsForPaths = exports.getPackageDirectories = exports.getWatchEntryPoints = exports.getEntryPoints = exports.EntryPointStrategy = void 0;
 const path_1 = require("path");
 const typescript_1 = __importDefault(require("typescript"));
+const tsvfs = __importDefault(require("@typescript/vfs"));
 const FS = __importStar(require("fs"));
 const Path = __importStar(require("path"));
 const package_manifest_1 = require("./package-manifest");
@@ -66,7 +67,7 @@ exports.EntryPointStrategy = {
      */
     Merge: "merge",
 };
-function getEntryPoints(logger, options) {
+function getEntryPoints(logger, options, tsLibsConfig) {
     if (!options.isSet("entryPoints")) {
         logger.warn("No entry points were provided, this is likely a misconfiguration.");
         return [];
@@ -81,7 +82,7 @@ function getEntryPoints(logger, options) {
     const strategy = options.getValue("entryPointStrategy");
     switch (strategy) {
         case exports.EntryPointStrategy.Resolve:
-            result = getEntryPointsForPaths(logger, expandGlobs(entryPoints, logger), options);
+            result = getEntryPointsForPaths(logger, expandGlobs(entryPoints, logger), options, tsLibsConfig);
             break;
         case exports.EntryPointStrategy.Expand:
             result = getExpandedEntryPointsForPaths(logger, expandGlobs(entryPoints, logger), options);
@@ -141,7 +142,7 @@ function getModuleName(fileName, baseDir) {
  * Converts a list of file-oriented paths in to DocumentationEntryPoints for conversion.
  * This is in contrast with the package-oriented `getEntryPointsForPackages`
  */
-function getEntryPointsForPaths(logger, inputFiles, options, programs = getEntryPrograms(logger, options)) {
+function getEntryPointsForPaths(logger, inputFiles, options, tsLibsConfig, programs = getEntryPrograms(logger, options, tsLibsConfig)) {
     const baseDir = options.getValue("basePath") || (0, fs_1.deriveRootDir)(inputFiles);
     const entryPoints = [];
     entryLoop: for (const fileOrDir of inputFiles.map(paths_1.normalizePath)) {
@@ -192,10 +193,23 @@ function expandGlobs(inputFiles, logger) {
     });
     return result;
 }
-function getEntryPrograms(logger, options) {
-    const rootProgram = typescript_1.default.createProgram({
-        rootNames: options.getFileNames(),
-        options: options.getCompilerOptions(),
+function getEntryPrograms(logger, options, tsLibsConfig = {}) {
+    const ts = typescript_1.default;
+    const compilerOptions = options.getCompilerOptions();
+    const rootNames = options.getFileNames();
+
+    const libs = tsLibsConfig.libs && tsLibsConfig.libs.length > 0 ? tsLibsConfig.libs : tsvfs.knownLibFilesForCompilerOptions({ target: 1 }, ts);
+    libs.forEach(lib => {
+        if (!Path.isAbsolute(lib)) {
+            lib = './node_modules/typescript/lib/' + lib;
+            lib = tsLibsConfig.root ? Path.resolve(tsLibsConfig.root, lib) : lib
+        }
+        rootNames.push(lib);
+    });
+
+    const rootProgram = ts.createProgram({
+        rootNames: rootNames,
+        options: compilerOptions,
         projectReferences: options.getProjectReferences(),
     });
     const programs = [rootProgram];
@@ -216,6 +230,9 @@ function getEntryPrograms(logger, options) {
     }
     return programs;
 }
+
+
+
 /**
  * Expand a list of input files.
  *
diff --git a/node_modules/typedoc/dist/lib/utils/loggers.js b/node_modules/typedoc/dist/lib/utils/loggers.js
index 727254d..6080d84 100644
--- a/node_modules/typedoc/dist/lib/utils/loggers.js
+++ b/node_modules/typedoc/dist/lib/utils/loggers.js
@@ -8,7 +8,8 @@ const typescript_1 = __importDefault(require("typescript"));
 const inspector_1 = require("inspector");
 const path_1 = require("path");
 const paths_1 = require("./paths");
-const isDebugging = () => !!(0, inspector_1.url)();
+//const isDebugging = () => !!(0, inspector_1.url)();
+const isDebugging = () => !!process.env["TYPEDOC_DEBUG"];
 /**
  * List of known log levels. Used to specify the urgency of a log message.
  */
diff --git a/node_modules/typedoc/dist/lib/utils/plugins.js b/node_modules/typedoc/dist/lib/utils/plugins.js
index 5f3a075..82e55ca 100644
--- a/node_modules/typedoc/dist/lib/utils/plugins.js
+++ b/node_modules/typedoc/dist/lib/utils/plugins.js
@@ -4,14 +4,20 @@ exports.loadPlugins = void 0;
 const path_1 = require("path");
 const url_1 = require("url");
 const paths_1 = require("./paths");
-async function loadPlugins(app, plugins) {
+async function loadPlugins(app, plugins, pluginInstanes) {
     for (const plugin of plugins) {
         const pluginDisplay = getPluginDisplayName(plugin);
         try {
             // eslint-disable-next-line @typescript-eslint/no-var-requires
-            let instance;
+            let instance = undefined;
             try {
-                instance = require(plugin);
+                if (pluginInstanes) {
+                    instance = pluginInstanes[plugin];
+                }
+
+                if (instance === undefined) {
+                    instance = require(plugin);
+                }
             }
             catch (error) {
                 if (error.code === "ERR_REQUIRE_ESM") {
